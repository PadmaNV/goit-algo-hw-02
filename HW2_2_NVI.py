from collections import deque

def is_palindrome(string):
    # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä —ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–±—ñ–ª—ñ–≤
    string = string.lower().replace(" ", "")
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—å–æ—ó —á–µ—Ä–≥–∏
    queue = deque()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤ —Ä—è–¥–∫–∞ –¥–æ —á–µ—Ä–≥–∏
    for char in string:
        queue.append(char)
    
    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤ –∑ –æ–±–æ—Ö –∫—ñ–Ω—Ü—ñ–≤ —á–µ—Ä–≥–∏
    while len(queue) > 1:
        if queue.popleft() != queue.pop():
            return False
    return True

while True:
    phrase = input("–í–≤–µ–¥—ñ—Ç—å —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–±–æ 'exit', —â–æ–± –≤–∏–π—Ç–∏: ")
    if phrase.lower() == "exit":
        break
    if is_palindrome(phrase):
        print("–ü–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º!!! üôÇ")
    else:
        print("–¶—è —Ñ—Ä–∞–∑–∞ –Ω–µ —î –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º. üòí")

